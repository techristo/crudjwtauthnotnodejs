"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodemailerProvider = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@loopback/core");
const rest_1 = require("@loopback/rest");
const nodemailer = (0, tslib_1.__importStar)(require("nodemailer"));
const keys_1 = require("../../../keys");
const keys_2 = require("./keys");
const SMTPTransport = require("nodemailer/lib/smtp-transport");
let NodemailerProvider = class NodemailerProvider {
    constructor(config, nodemailerConfig) {
        this.config = config;
        this.nodemailerConfig = nodemailerConfig;
        if (this.nodemailerConfig) {
            this.transporter = nodemailer.createTransport({
                ...this.nodemailerConfig,
            });
        }
        else {
            throw new rest_1.HttpErrors.PreconditionFailed('Nodemailer Config missing !');
        }
    }
    value() {
        return {
            publish: async (message) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                const fromEmail = (_b = (_a = message.options) === null || _a === void 0 ? void 0 : _a.from) !== null && _b !== void 0 ? _b : (_c = this.config) === null || _c === void 0 ? void 0 : _c.senderEmail;
                if (!fromEmail) {
                    throw new rest_1.HttpErrors.BadRequest('Message sender not found in request');
                }
                if (message.receiver.to.length === 0) {
                    throw new rest_1.HttpErrors.BadRequest('Message receiver not found in request');
                }
                if (!message.subject || !message.body) {
                    throw new rest_1.HttpErrors.BadRequest('Message data incomplete');
                }
                if ((_d = this.config) === null || _d === void 0 ? void 0 : _d.sendToMultipleReceivers) {
                    const receivers = message.receiver.to.map(receiver => receiver.id);
                    const emailReq = {
                        ...message.options,
                        from: fromEmail || '',
                        to: receivers,
                        subject: (_f = (_e = message.options) === null || _e === void 0 ? void 0 : _e.subject) !== null && _f !== void 0 ? _f : message.subject,
                        text: (_h = (_g = message.options) === null || _g === void 0 ? void 0 : _g.text) !== null && _h !== void 0 ? _h : message.body,
                        html: (_j = message.options) === null || _j === void 0 ? void 0 : _j.html,
                        attachments: (_k = message.options) === null || _k === void 0 ? void 0 : _k.attachments,
                    };
                    await this.transporter.sendMail(emailReq);
                }
                else {
                    const publishes = message.receiver.to.map(receiver => {
                        var _a, _b, _c, _d, _e, _f;
                        const emailReq = {
                            ...message.options,
                            from: fromEmail || '',
                            to: receiver.id,
                            subject: (_b = (_a = message.options) === null || _a === void 0 ? void 0 : _a.subject) !== null && _b !== void 0 ? _b : message.subject,
                            text: (_d = (_c = message.options) === null || _c === void 0 ? void 0 : _c.text) !== null && _d !== void 0 ? _d : message.body,
                            html: (_e = message.options) === null || _e === void 0 ? void 0 : _e.html,
                            attachments: (_f = message.options) === null || _f === void 0 ? void 0 : _f.attachments,
                        };
                        return this.transporter.sendMail(emailReq);
                    });
                    await Promise.all(publishes);
                }
            },
        };
    }
};
NodemailerProvider = (0, tslib_1.__decorate)([
    (0, tslib_1.__param)(0, (0, core_1.inject)(keys_1.NotificationBindings.Config, {
        optional: true,
    })),
    (0, tslib_1.__param)(1, (0, core_1.inject)(keys_2.NodemailerBindings.Config, {
        optional: true,
    })),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object])
], NodemailerProvider);
exports.NodemailerProvider = NodemailerProvider;
//# sourceMappingURL=nodemailer.provider.js.map