"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SesProvider = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@loopback/core");
const rest_1 = require("@loopback/rest");
const aws_sdk_1 = require("aws-sdk");
const keys_1 = require("../../../keys");
const keys_2 = require("./keys");
let SesProvider = class SesProvider {
    constructor(config, sesConfig) {
        this.config = config;
        this.sesConfig = sesConfig;
        if (this.sesConfig) {
            this.sesService = new aws_sdk_1.SES(this.sesConfig);
        }
        else {
            throw new rest_1.HttpErrors.PreconditionFailed('AWS SES Config missing !');
        }
    }
    value() {
        return {
            publish: async (message) => {
                var _a, _b, _c, _d;
                const fromEmail = ((_a = message.options) === null || _a === void 0 ? void 0 : _a.fromEmail) || ((_b = this.config) === null || _b === void 0 ? void 0 : _b.senderEmail);
                if (!fromEmail) {
                    throw new rest_1.HttpErrors.BadRequest('Message sender not found in request');
                }
                if (message.receiver.to.length === 0) {
                    throw new rest_1.HttpErrors.BadRequest('Message receiver not found in request');
                }
                if (!message.subject || !message.body) {
                    throw new rest_1.HttpErrors.BadRequest('Message data incomplete');
                }
                if ((_c = this.config) === null || _c === void 0 ? void 0 : _c.sendToMultipleReceivers) {
                    const receivers = message.receiver.to.map(receiver => receiver.id);
                    const emailReq = {
                        Source: fromEmail || '',
                        Destination: {
                            ToAddresses: receivers,
                        },
                        Message: {
                            Subject: {
                                Data: (_d = message.subject) !== null && _d !== void 0 ? _d : '',
                            },
                            Body: {
                                Html: {
                                    Data: message.body || '',
                                },
                            },
                        },
                    };
                    await this.sesService.sendEmail(emailReq).promise();
                }
                else {
                    const publishes = message.receiver.to.map(receiver => {
                        var _a;
                        const emailReq = {
                            Source: fromEmail || '',
                            Destination: {
                                ToAddresses: [receiver.id],
                            },
                            Message: {
                                Subject: {
                                    Data: (_a = message.subject) !== null && _a !== void 0 ? _a : '',
                                },
                                Body: {
                                    Html: {
                                        Data: message.body || '',
                                    },
                                },
                            },
                        };
                        return this.sesService.sendEmail(emailReq).promise();
                    });
                    await Promise.all(publishes);
                }
            },
        };
    }
};
SesProvider = (0, tslib_1.__decorate)([
    (0, tslib_1.__param)(0, (0, core_1.inject)(keys_1.NotificationBindings.Config, {
        optional: true,
    })),
    (0, tslib_1.__param)(1, (0, core_1.inject)(keys_2.SESBindings.Config, {
        optional: true,
    })),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object])
], SesProvider);
exports.SesProvider = SesProvider;
//# sourceMappingURL=ses.provider.js.map