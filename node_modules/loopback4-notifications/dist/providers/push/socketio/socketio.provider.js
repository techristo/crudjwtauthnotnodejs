"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketIOProvider = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@loopback/core");
const rest_1 = require("@loopback/rest");
const socket_io_client_1 = (0, tslib_1.__importDefault)(require("socket.io-client"));
const keys_1 = require("./keys");
let SocketIOProvider = class SocketIOProvider {
    constructor(socketConfig) {
        var _a;
        this.socketConfig = socketConfig;
        if ((_a = this.socketConfig) === null || _a === void 0 ? void 0 : _a.url) {
            this.socketService = (0, socket_io_client_1.default)(this.socketConfig.url, socketConfig === null || socketConfig === void 0 ? void 0 : socketConfig.options);
        }
        else {
            throw new rest_1.HttpErrors.PreconditionFailed('Socket Config missing !');
        }
    }
    value() {
        return {
            publish: async (message) => {
                var _a, _b, _c;
                if (((_b = (_a = message === null || message === void 0 ? void 0 : message.receiver) === null || _a === void 0 ? void 0 : _a.to) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                    /**
                     * This method is responsible to send all the required data to socket server
                     * The socket server needs to parse the data and send the message to intended
                     * user.
                     *
                     * emitting a message to channel passed via config
                     */
                    if (!this.socketConfig || !this.socketConfig.defaultPath) {
                        throw new rest_1.HttpErrors.PreconditionFailed('Channel info is missing !');
                    }
                    this.socketService.emit(((_c = message.options) === null || _c === void 0 ? void 0 : _c.path) || this.socketConfig.defaultPath, JSON.stringify(message));
                }
                else {
                    throw new rest_1.HttpErrors.BadRequest('Message receiver not found');
                }
            },
        };
    }
};
SocketIOProvider = (0, tslib_1.__decorate)([
    (0, tslib_1.__param)(0, (0, core_1.inject)(keys_1.SocketBindings.Config, {
        optional: true,
    })),
    (0, tslib_1.__metadata)("design:paramtypes", [Object])
], SocketIOProvider);
exports.SocketIOProvider = SocketIOProvider;
//# sourceMappingURL=socketio.provider.js.map