"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationProvider = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@loopback/core");
const rest_1 = require("@loopback/rest");
const keys_1 = require("../keys");
let NotificationProvider = class NotificationProvider {
    constructor(smsProvider, emailProvider, pushProvider) {
        this.smsProvider = smsProvider;
        this.emailProvider = emailProvider;
        this.pushProvider = pushProvider;
    }
    publish(data) {
        if (data.type === 2 /* SMS */ && this.smsProvider) {
            return this.smsProvider.publish(data);
        }
        else if (data.type === 1 /* Email */ && this.emailProvider) {
            return this.emailProvider.publish(data);
        }
        else if (data.type === 0 /* Push */ && this.pushProvider) {
            return this.pushProvider.publish(data);
        }
        else {
            throw new rest_1.HttpErrors.UnprocessableEntity("ProviderNotFound" /* ProviderNotFound */);
        }
    }
    value() {
        return {
            publish: async (message) => this.publish(message),
        };
    }
};
NotificationProvider = (0, tslib_1.__decorate)([
    (0, tslib_1.__param)(0, (0, core_1.inject)(keys_1.NotificationBindings.SMSProvider, { optional: true })),
    (0, tslib_1.__param)(1, (0, core_1.inject)(keys_1.NotificationBindings.EmailProvider, { optional: true })),
    (0, tslib_1.__param)(2, (0, core_1.inject)(keys_1.NotificationBindings.PushProvider, { optional: true })),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, Object])
], NotificationProvider);
exports.NotificationProvider = NotificationProvider;
//# sourceMappingURL=notification.provider.js.map